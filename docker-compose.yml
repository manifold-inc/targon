services:
  nvidia-attest: 
    deploy:
      replicas: 3
    image: ghcr.io/manifold-inc/targon-nvidia-attest:latest
    restart: always

  targon:
    restart: always
    stop_grace_period: 15m
    depends_on:
      nvidia-attest:
        condition: service_started
      mongo:
        condition: service_healthy
    build:
      dockerfile: Dockerfile
      context: ./targon
    env_file: .env

  traefik:
    image: traefik:v2.10.4
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./traefik/traefik.https.toml:/etc/traefik/traefik.toml
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-public-certificates:/certificates

  mongo-wrapper:
    build:
      context: ./mongo-wrapper
      dockerfile: Dockerfile
    environment:
      - MONGO_USERNAME=${MONGO_USERNAME}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
    restart: unless-stopped
    labels:
      - traefik.enable=${ENABLE_MONGO_WRAPPER:-false}
      - traefik.http.routers.api.rule=Host(`${MONGO_WRAPPER_HOST}`)
      - traefik.http.routers.api.tls=true
      - traefik.http.routers.api.tls.certresolver=letsencrypt
      - traefik.http.services.api.loadbalancer.server.port=8080

  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=targon
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped

volumes:
  mongo_data:
  traefik-public-certificates:
